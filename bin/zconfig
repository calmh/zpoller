#!/usr/bin/env node

var _ = require('underscore');
var async = require('async');
var config = require('../lib/config');
var crypto = require('crypto/md5');
var db = require('../lib/db');
var Log = require('log'), log = new Log('info', process.stderr);

config.ready(function () {
    if (config.general.loglevel) {
        log = new Log(config.general.loglevel, process.stderr);
    }
    db.ready(main);
});

function updateConfig(callback) {
    log.debug('updateConfig()');
    db.collection('config', function (err, coll) {
        function flagForRemoval(callback) {
            log.debug('updateConfig/flagForRemoval()');
            coll.update({ }, { $set: { remove: true } }, { safe: true, multi: true }, callback);
        }

        function upsertPackages(callback) {
            log.debug('updateConfig/upsertPackages()');
            var cnt = 0;
            var len = config.packages.length;
            _.each(config.packages, function (p) {
                p.key = crypto.hex_md5(JSON.stringify(p));
                coll.update({ key: p.key }, { $set: p, $unset: { remove: 1 } }, { safe: true, upsert: true }, function (err, docs) {
                    if (++cnt === len) {
                        callback();
                    }
                });
            });
        }

        function removeOld(callback) {
            log.debug('updateConfig/removeOld()');
            coll.remove({ remove: true }, { safe: true }, callback);
        }

        function setCreatedDate(callback) {
            log.debug('updateConfig/setCreatedDate()');
            coll.update({ created: null }, { $set: { created: Math.floor(Date.now() / 1000) } }, { multi: true, safe: true }, callback);
        }

        async.series([flagForRemoval, upsertPackages, removeOld, setCreatedDate], callback);
    });
}

function updateHosts(callback) {
    log.debug('updateHosts()');
    db.collection('hosts', function (err, coll) {
        function flagForRemoval(callback) {
            log.debug('updateHosts/flagForRemoval()');
            coll.update({ }, { $set: { remove: true } }, { safe: true, multi: true }, callback);
        }

        function upsertHosts(callback) {
            log.debug('updateHosts/upsertHosts()');
            var cnt = 0;
            var len = config.hosts.length;
            _.each(config.hosts, function (host) {
                // When we update a host, we reset `indexed` to be sure it gets reindexed
                // the next time around.
                var obj = { name: host[0], ip: host[1], community: host[2], indexed: 0 };
                coll.update({ name: obj.name }, { $set: obj, $unset: { remove: 1 } }, { safe: true, upsert: true }, function () {
                    if (++cnt === len) {
                        log.debug('updateHosts/upsertHosts() - updated ' + len + ' hosts');
                        callback();
                    }
                });
            });
        }

        function removeTargets(callback) {
            log.debug('updateHosts/removeTargets()');
            coll.find({ remove: true }, { name: 1 }).toArray(function (err, data) {
                if (data && data.length > 0) {
                    var names = _.pluck(data, 'name');
                    log.debug('updateHosts/removeTargets() - remove targets for ' + names.length + ' hosts');
                    db.collection('targets', function (err, coll) {
                        coll.remove({ name: { $in: names } }, { safe: true }, callback);
                    });
                } else {
                    callback(err, data);
                }
            });
        }

        function removeHosts(callback) {
            log.debug('updateHosts/removeHosts()');
            coll.remove({ remove: true }, { safe: true }, callback);
        }

        function setCreatedDate(callback) {
            log.debug('updateHosts/setCreatedDate()');
            coll.update({ created: null }, { $set: { created: Math.floor(Date.now() / 1000), indexed: 0 } }, { multi: true, safe: true }, callback);
        }

        async.series([flagForRemoval, upsertHosts, removeTargets, removeHosts, setCreatedDate], callback);
    });
}

function main() {
    log.debug('main()');
    async.series([updateConfig, updateHosts], function () {
        log.debug('main/done()');
        db.close();
    });
}

// vim: set ft=javascript:
