#!/usr/bin/env node

var _ = require('underscore');
var Log = require('log'), log = new Log('info', process.stderr);
var async = require('async');
var config = require('../lib/config');
var db = require('../lib/db');
var tm = require('../lib/targetmaker');
var util = require('util');
var SNMP = require('snmp-native');
var mongodb = require('mongodb');

config.ready(function () {
    log.debug('INIT: Config ready.');
    db.ready(function () {
        log.debug('INIT: DB ready.');
        main();
    });
});

function getTargets(interval, callback) {
    log.debug('getTargets()');
    db.pooledClient.collection('targets', function (error, collection) {
        collection.find({"interfaces.tables.intervals": interval}).toArray(callback);
    });
}

function hostsToIndex(callback) {
    log.debug('hostsToIndex()');
    function getChangedDate(callback) {
        log.debug('getChangedDate()');
        db.collection('config', function (error, collection) {
            collection.mapReduce(function() { emit ('maxCreated', this.created) }, function (key, arr) { return Math.max.apply(null, arr); }, { out: { inline: 1 }, safe: true }, function (err, res) {
                if (err) {
                    callback(err);
                }
                if (res.length === 1) {
                    callback(null, res[0].value);
                } else {
                    callback(null, 0);
                }
            });
        });
    }

    function getHostsToIndex(cd, callback) {
        log.debug('getHostsToIndex()');
        db.collection('hosts', function (err, collection) {
            var intv = Math.floor(Date.now() / 1000) - 86400;
            var q = { $or: [
                { indexed: { $lte: cd } }, // Configuration has changed since last index
                { indexed: { $lte: intv } } // The reindexing interval has passed
            ] };
            var f = { name: 1, ip: 1, community: 1 };
            collection.find(q, f, { safe: true }).toArray(function (err, hs) {
                _.each(hs, function (h) {
                    delete h._id;
                });
                callback(null, hs);
            });
        });
    }

    async.waterfall([getChangedDate, getHostsToIndex], callback);
}

function getPackages(callback) {
    log.debug('getPackages()');
    db.collection('config', function (err, coll) {
        coll.find().toArray(callback);
    });
}

function updateTargets(res) {
    log.debug('updateTargets()');

    db.collection('targets', function (error, coll) {
        _.each(res, function (host) {
            log.debug('Updating target for host: ' + host.name);
            coll.update({ name: host.name }, { $set: host }, { upsert: true });
        });
    });

    db.collection('hosts', function (error, coll) {
        _.each(res, function (host) {
            log.debug('Updating host record for host: ' + host.name);
            coll.update({ name: host.name }, { $set: { indexed: host.indexed, uptimeWhenIndexed: host.uptimeWhenIndexed }});
        });
    });
}

function reindexer() {
    log.debug('reindexer()');
    var interval = 60*1000;

    if (!reindexer.queue) {
        // FIXME: rewrite ffs
        reindexer.queue = async.queue(function (host, callback) {
            tm.indexHost(host, reindexer.pkgs, function (error, result) {
                if (result && !error) {
                    updateTargets([result]);
                }
                callback();
            });
        }, config.general.concurrency.reindex);

        reindexer.queue.empty = function () {
            setTimeout(reindexer, interval);
        };

        log.debug('Created reindexing queue with concurrency ' + config.general.concurrency.reindex);
    }

    getPackages(function (err, pkgs) {
        // Check if we need to start any new pollers.
        var intervals = _.pluck(pkgs, 'intervals');
        _.each(intervals, function (interval) {
            var intervalName = interval.join('-');
            if (!pollers[intervalName]) {
                pollers[intervalName] = true;
                startPoller(interval);
            };
        });

        // Check if there are hosts to reindex.
        hostsToIndex(function (error, hosts) {
            if (hosts.length > 0) {
                log.info('Going to reindex ' + hosts.length + ' hosts.');
                reindexer.pkgs = pkgs;
                reindexer.queue.push(hosts);
            } else {
                reindexer.pkgs = undefined;
                setTimeout(reindexer, interval);
            }
        });
    });
}

var pollers = {};
var hosts = {};
var cache = {};
var results = {};
var conn;

function pollHost(host, interval, done) {
/*
       {
       "_id" : ObjectId("4f70b8306769195d20a83413"),
       "community" : "nym.se",
       "host" : "anto",
       "indexed" : 1332787228,
       "interfaces" : {
       "lo0" : {
       "metadata" : {
       "mtu" : 8232,
       "description" : "lo0",
       "speed" : 127000000
       },
       "tables" : [
       {
       "table" : "ifInOctets",
       "oid" : ".1.3.6.1.2.1.31.1.1.1.6.1",
       "intervals" : [ 60, 3600, 86400 ]
       },
*/
    var oids, tables, intfs, hres, hcache;

    interval = interval.toString();
    if (!results[interval]) {
        results[interval] = {};
        cache[interval] = {};
    }

    if (!results[interval][host.name]) {
        results[interval][host.name] = {
            counter: {},
            rate: {},
            stat: {}
        };
    }
    hres = results[interval][host.name];

    if (!cache[interval][host.name]) {
        cache[interval][host.name] = {
            oids: [],
            tables: {},
            intfs: {}
        };
        hcache = cache[interval][host.name];
        _.each(host.interfaces, function (intf) {
            _.each(intf.tables, function (table) {
                if (table.intervals.toString() === interval) {
                    hcache.oids.push(tm.unittest.parseOid(table.oid));
                    hcache.tables[table.oid] = table.table;
                    hcache.intfs[table.oid] = intf.name;
                    if (!hres.counter[intf.name]) {
                        hres.counter[intf.name] = {};
                    }
                }
            });
        });
    }
    hcache = cache[interval][host.name];

    conn.getAll({ oids: hcache.oids, host: host.ip, community: host.community }, function (err, data) {
        _.each(data, function (vb) {
            var oldVal, oldT;
            var oid = vb.oid;
            var val = vb.value;
            var t = Math.round((vb.receiveStamp + vb.sendStamp) / 2.0);
            var oidS = '.' + oid.join('.');
            var intf = hcache.intfs[oidS];
            var table = hcache.tables[oidS];
            if (hres.counter[intf][table]) {
                oldVal = hres.counter[intf][table][0];
                oldT = hres.counter[intf][table][1];
                hres.rate['rate.' + intf + '.' + table] = Math.round((val - oldVal) / (t - oldT) * 1000);
            }
            hres.counter[intf][table] = [ val, t ];
        });
        done(hres.rate);
    });
}

var dbQueue;
function startDb() {
    var startTime = 0;
    var usedTime = 0;
    var processed = 0;
    function dbProcessor(task, callback) {
        var result = task.result;
        var id = task._id;
        var collectionName = task.collection;

        if (_.size(result) < 1) {
            return callback();
        }

        if (!startTime) {
            startTime = Date.now();
        }

        db.collection(collectionName, function (error, collection) {
            var conv = {};
            _.each(result, function (val, key) { conv[key] = new mongodb.Long(val); });
            var update = { $inc: _.extend({ div: new mongodb.Long(1) }, conv ) };
            var query = { _id: new mongodb.Long(id) };
            collection.update(query, update, { upsert: true, safe: true }, function (err, res) {
                processed += 1;
                callback();
            });
        });
    }

    dbQueue = async.queue(dbProcessor, config.general.concurrency.database);
    dbQueue.drain = function () {
        var endTime = Date.now();
        usedTime += endTime - startTime;
        startTime = 0;
        if (processed > 100) {
            log.info('DB: ' + processed + ' updates in ' + usedTime + ' ms (' + (1000 * processed / usedTime).toFixed(1) + ' reqs/s).');
            startTime = 0;
            usedTime = 0;
            processed = 0;
        }
    };
}

function startPoller(interval) {
    log.debug('startPoller()');
    var delay = interval[0] * 1000;
    var intervalName = interval.join('-');

    function pollerLoop() {
        log.debug('pollerLoop()');
        var startTime = Date.now();
        var nhosts = 0;
        var ncounters = 0;
        var dbTime = 0;

        // FIXME: Gah!
        function pollSingleHost(target, callback) {
            log.debug('pollSingleHost(' + target.name + ')');
            nhosts += 1;

            pollHost(target, interval, function (result) {
                if (_.size(result) > 0) {
                    ncounters += _.size(result);
                    var tasks = _.map(interval, function (ival) {
                        return { _id: Math.floor(Date.now() / 1000 / ival) * ival, result: result, collection: 'host.' + target.name + '.i' + ival};
                    });
                    dbQueue.push(tasks);
                }

                callback();
            });
        };

        function pollComplete() {
            var endTime = Date.now();
            log.info('SNMP: ' + nhosts + ' hosts, ' + ncounters + ' counters in ' + (endTime - startTime) + ' ms (' + (1000 * ncounters / (endTime - startTime)).toFixed(1) + ' reqs/s).');
            var now = Date.now();
            // We add a few ms to make sure we are not called before it's time.
            // Because sometimes sleep returns slightly before it should, and
            // then we might schedule a new polling round a millisecond later.
            var sleep = Math.ceil(Date.now() / delay) * delay - now + 10;
            setTimeout(pollerLoop, sleep);
        };

        log.info('SNMP: Poller ' + intervalName + ' loading targets...');
        getTargets(intervalName, function (error, targets) {
            var hosts = _.values(targets);
            log.info('SNMP: Poller ' + intervalName + ' starting poll for ' + hosts.length + ' hosts.');
            async.forEach(hosts, pollSingleHost, pollComplete);
        });
    }

    pollerLoop();
}

function main() {
    log.debug('main()');
    conn = new SNMP.Session();
    reindexer();
    startDb();
}

// vim: set ft=javascript:
