--- # This defines the start of a YAML file.
- # This defines the start of a polling package
  # Indentation is relevant.

  # Which hosts does it apply to? This a regexp that is applied
  # to the host name. Any host that matches get this package applied to it.
  hosts: .

  # Select an OID to index on. This means we will fetch the subtree below
  # this OID and use whatever we get back as the identifier for this object.
  # In case you use ifName (like below) it means we'll follow the same
  # interface around even if it changes ifIndex, as long as the name remains
  # the same.
  index: .1.3.6.1.2.1.31.1.1.1.1

  # Interfaces are only used if they pass the following filter rules.
  # The only allowed operations are those demonstrated by the example.
  filter:
    # Filter by ifAdminStatus == up 
    - oid: .1.3.6.1.2.1.2.2.1.7
      op: "=="
      rhs: 1
    # Filter by ifOperStatus != down
    - oid: .1.3.6.1.2.1.2.2.1.8
      op: "!="
      rhs: 2
    # Filter by ifSpeed > 0 bps */
    - oid: .1.3.6.1.2.1.2.2.1.5
      op: ">"
      rhs: 0
    # Filter by ifMtu < 10000 */
    - oid: .1.3.6.1.2.1.2.2.1.4
      op: "<"
      rhs: 10000

  # Collect the following OIDs to the named tables. If more than one OID
  # maps to the same table, we'll use the first that the host successfully
  # responds to. This can be used to try 64 bit counters but fall back to 32
  # bit counters if they don"t exist.
  collect:
    - oid: .1.3.6.1.2.1.31.1.1.1.6
      table: ifInOctets
    - oid: .1.3.6.1.2.1.2.2.1.10
      table: ifInOctets
    - oid: .1.3.6.1.2.1.31.1.1.1.10
      table: ifOutOctets
    - oid: .1.3.6.1.2.1.2.2.1.16
      table: ifOutOctets
    - oid: .1.3.6.1.2.1.2.2.1.11
      table: ifInUcastPkts
    - oid: .1.3.6.1.2.1.2.2.1.17
      table: ifOutUcastPkts

  # Define which intervals to collect values at. This should be an ordered
  # list, with the smallest interval at the front. All following intervals
  # should be multiples of the first one. In reality, the poller will collect
  # data at the rate specified by the first interval and average it to the
  # other intervals as needed.
  intervals: [ 60, 3600, 86400 ]

  # Collect these metadata fields for each interface. They are not used by the
  # poller but can be shown for informational purposes.
  metadata: 
    mtu: .1.3.6.1.2.1.2.2.1.4
    description: .1.3.6.1.2.1.2.2.1.2
    speed: .1.3.6.1.2.1.2.2.1.5

  # Define graphs. Not used by the poller, but used by the HTTP server.
  graphs: []

-
  hosts: .
  index: .1.3.6.1.2.1.31.1.1.1.1
  filter:
    # Filter by ifAdminStatus == up 
    - oid: .1.3.6.1.2.1.2.2.1.7
      op: "=="
      rhs: 1
    # Filter by ifOperStatus != down
    - oid: .1.3.6.1.2.1.2.2.1.8
      op: "!="
      rhs: 2
    # Filter by ifSpeed > 0 bps */
    - oid: .1.3.6.1.2.1.2.2.1.5
      op: ">"
      rhs: 0
    # Filter by ifMtu < 10000 */
    - oid: .1.3.6.1.2.1.2.2.1.4
      op: "<"
      rhs: 10000

  collect:
    - oid: .1.3.6.1.2.1.2.2.1.14
      table: ifInErrors
    - oid: .1.3.6.1.2.1.2.2.1.20
      table: ifOutErrors

  intervals: [ 3600, 86400 ]

  graphs: []
